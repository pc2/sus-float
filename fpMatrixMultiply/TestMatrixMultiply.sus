module TestMatrixMultiply {
    interface TestMatrixMultiply : bool start, float[5][4] Matrix1, float[3][5] Matrix2 -> float[3][4] Result

    when start { 
    Result = fpMatrixMultiply #(ZeileA: 5, SpalteA: 4, ZeileB: 3, SpalteB: 5)(Matrix1, Matrix2)
    }
}

module fpMatrixMultiply #(int ZeileA, int SpalteA, int ZeileB, int SpalteB){
    interface fpMatrixMultiply: float[ZeileA][SpalteA] MatrixA, float[ZeileB][SpalteB] MatrixB -> float[ZeileB][SpalteA] ResultMatrix



	if (ZeileA != SpalteB){
		for int i in 0..ZeileB{
			for int j in 0..SpalteA{
				ResultMatrix[i][j] = fpZero()
			}
		}
	} else {
		for int i in 0..ZeileB{
			for int j in 0..SpalteA{
			float[ZeileA] List
				for int k in 0..ZeileA{
					List[k] = fpMult(MatrixA[j][k],  MatrixB[k][i])
				}
			ResultMatrix[j][i] = fpTreeAdd#(WIDTH: ZeileA)(List)
			}
		}
	}
}

// standard TreeAdd function modified to handle single precision float values
module fpTreeAdd #(int WIDTH) {
	interface fpTreeAdd : float[WIDTH] values'0 -> float total

	if WIDTH == 0 {
		// Have to explicitly give zero a latency count. 
		// Otherwise total's latency can't be determined. 
		float zero'0 = fpZero()
		total = zero
	} else if WIDTH == 1 {
		total = values[0]
	} else {
		gen int L_SZ = WIDTH / 2
		gen int R_SZ = WIDTH - L_SZ

		// Can declare modules and use them later. 
		fpSplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type float) split
		float[L_SZ] left_part, float[R_SZ] right_part = split(values)

		// Or instantiate submodules inline
		float left_total = fpTreeAdd #(WIDTH: L_SZ)(left_part)
		float right_total = fpTreeAdd #(WIDTH: R_SZ)(right_part)
		
		// Can add pipelining registers here too. 
		// Latency Counting will figure it out.
		reg total = fpAdd(left_total, right_total)
	}
}

// standard SplitAt fuction modified to handle single precision float values 
module fpSplitAt #(T, int SIZE, int SPLIT_POINT) {
	interface fpSplitAt : T[SIZE] i -> T[SPLIT_POINT] left, T[SIZE - SPLIT_POINT] right

	for int I in 0..SPLIT_POINT {
		left[I] = i[I]
	}
	for int I in 0..SIZE - SPLIT_POINT {
		right[I] = i[I+SPLIT_POINT]
	}
}


// wrapper for a single precision floating point add function 
module fpAdd {

    interface fpAdd: float value1'0, float value2'0 -> float result'11
    
    floating_point_0 fpa

    result = fpa(value1, value2)
}

// extern module has to be generated in Vivado with the IP-Catalog
extern module floating_point_0 {
    domain aclk 

    interface floating_point_0: float s_axis_a_tdata'0, float s_axis_b_tdata'0 -> float m_axis_result_tdata'11
}

module fpMult {

    interface fpMult: float value1'0, float value2'0 -> float result'9

    floating_point_1 fpm 

    result = fpm(value1, value2)

}


extern module floating_point_1 {
    domain aclk

    interface floating_point_1: float s_axis_a_tdata'0, float s_axis_b_tdata'0 ->  float m_axis_result_tdata'9
    
}

// wrapper for a system verilog module that defines a float 0 a constant because there are not float constants in SUS yet  
module fpZero {
    interface fpZero: -> float result'0

    float_zero fpz

    result = fpz()
}

// calls the extern module float_zero.sv for a constant 0 -> has to also be in design files when simulating
extern module float_zero {
    interface float_zero: -> float float_zero'0
}