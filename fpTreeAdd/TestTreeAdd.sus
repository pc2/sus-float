module TestTreeAdd {
    interface TestTreeAdd : bool start, float[10] Array -> float Result

    when start { 
    Result = fpTreeAdd#(WIDTH: 10)(Array)
    }
}

module fpTreeAdd #(int WIDTH) {
	interface fpTreeAdd : float[WIDTH] values'0 -> float total

	if WIDTH == 0 {
		// Have to explicitly give zero a latency count. 
		// Otherwise total's latency can't be determined. 
		float zero'0 = fpZero()
		total = zero
	} else if WIDTH == 1 {
		total = values[0]
	} else {
		gen int L_SZ = WIDTH / 2
		gen int R_SZ = WIDTH - L_SZ

		// Can declare modules and use them later. 
		fpSplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type float) split
		float[L_SZ] left_part, float[R_SZ] right_part = split(values)

		// Or instantiate submodules inline
		float left_total = fpTreeAdd #(WIDTH: L_SZ)(left_part)
		float right_total = fpTreeAdd #(WIDTH: R_SZ)(right_part)
		
		// Can add pipelining registers here too. 
		// Latency Counting will figure it out.
		reg total = fpAdd(left_total, right_total)
	}
}

module fpAdd {

    interface fpAdd: float value1'0, float value2'0 -> float result'11
    
    floating_point_0 fpa

    result = fpa(value1, value2)
}

extern module floating_point_0 {
    domain aclk 

    interface floating_point_0: float s_axis_a_tdata'0, float s_axis_b_tdata'0 -> float m_axis_result_tdata'11
}

module fpSplitAt #(T, int SIZE, int SPLIT_POINT) {
	interface fpSplitAt : T[SIZE] i -> T[SPLIT_POINT] left, T[SIZE - SPLIT_POINT] right

	for int I in 0..SPLIT_POINT {
		left[I] = i[I]
	}
	for int I in 0..SIZE - SPLIT_POINT {
		right[I] = i[I+SPLIT_POINT]
	}
}

module fpZero {
    interface fpZero: -> float result'0

    float_zero fpz

    result = fpz()
}

extern module float_zero {
    interface float_zero: -> float float_zero'0
}